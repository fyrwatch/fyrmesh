# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import fyrmesh_pb2 as proto_dot_fyrmesh__pb2


class InterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_stream(
                '/main.Interface/Read',
                request_serializer=proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
                response_deserializer=proto_dot_fyrmesh__pb2.ComplexLog.FromString,
                )
        self.Write = channel.unary_unary(
                '/main.Interface/Write',
                request_serializer=proto_dot_fyrmesh__pb2.ControlCommand.SerializeToString,
                response_deserializer=proto_dot_fyrmesh__pb2.Acknowledge.FromString,
                )


class InterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_stream_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=proto_dot_fyrmesh__pb2.Trigger.FromString,
                    response_serializer=proto_dot_fyrmesh__pb2.ComplexLog.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=proto_dot_fyrmesh__pb2.ControlCommand.FromString,
                    response_serializer=proto_dot_fyrmesh__pb2.Acknowledge.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.Interface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Interface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/main.Interface/Read',
            proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
            proto_dot_fyrmesh__pb2.ComplexLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.Interface/Write',
            proto_dot_fyrmesh__pb2.ControlCommand.SerializeToString,
            proto_dot_fyrmesh__pb2.Acknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrchestratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Status = channel.unary_unary(
                '/main.Orchestrator/Status',
                request_serializer=proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
                response_deserializer=proto_dot_fyrmesh__pb2.MeshStatus.FromString,
                )
        self.Connection = channel.unary_unary(
                '/main.Orchestrator/Connection',
                request_serializer=proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
                response_deserializer=proto_dot_fyrmesh__pb2.Acknowledge.FromString,
                )
        self.Observe = channel.unary_stream(
                '/main.Orchestrator/Observe',
                request_serializer=proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
                response_deserializer=proto_dot_fyrmesh__pb2.SimpleLog.FromString,
                )
        self.Ping = channel.unary_unary(
                '/main.Orchestrator/Ping',
                request_serializer=proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
                response_deserializer=proto_dot_fyrmesh__pb2.Acknowledge.FromString,
                )


class OrchestratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Observe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrchestratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=proto_dot_fyrmesh__pb2.Trigger.FromString,
                    response_serializer=proto_dot_fyrmesh__pb2.MeshStatus.SerializeToString,
            ),
            'Connection': grpc.unary_unary_rpc_method_handler(
                    servicer.Connection,
                    request_deserializer=proto_dot_fyrmesh__pb2.Trigger.FromString,
                    response_serializer=proto_dot_fyrmesh__pb2.Acknowledge.SerializeToString,
            ),
            'Observe': grpc.unary_stream_rpc_method_handler(
                    servicer.Observe,
                    request_deserializer=proto_dot_fyrmesh__pb2.Trigger.FromString,
                    response_serializer=proto_dot_fyrmesh__pb2.SimpleLog.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=proto_dot_fyrmesh__pb2.Trigger.FromString,
                    response_serializer=proto_dot_fyrmesh__pb2.Acknowledge.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.Orchestrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Orchestrator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.Orchestrator/Status',
            proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
            proto_dot_fyrmesh__pb2.MeshStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.Orchestrator/Connection',
            proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
            proto_dot_fyrmesh__pb2.Acknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Observe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/main.Orchestrator/Observe',
            proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
            proto_dot_fyrmesh__pb2.SimpleLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.Orchestrator/Ping',
            proto_dot_fyrmesh__pb2.Trigger.SerializeToString,
            proto_dot_fyrmesh__pb2.Acknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
