// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.7
// source: proto/fyrmesh.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Triggermessage string            `protobuf:"bytes,1,opt,name=triggermessage,proto3" json:"triggermessage,omitempty"`
	Metadata       map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fyrmesh_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fyrmesh_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_proto_fyrmesh_proto_rawDescGZIP(), []int{0}
}

func (x *Trigger) GetTriggermessage() string {
	if x != nil {
		return x.Triggermessage
	}
	return ""
}

func (x *Trigger) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Acknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Acknowledge) Reset() {
	*x = Acknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fyrmesh_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acknowledge) ProtoMessage() {}

func (x *Acknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fyrmesh_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acknowledge.ProtoReflect.Descriptor instead.
func (*Acknowledge) Descriptor() ([]byte, []int) {
	return file_proto_fyrmesh_proto_rawDescGZIP(), []int{1}
}

func (x *Acknowledge) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Acknowledge) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type MeshOrchStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connected     bool      `protobuf:"varint,1,opt,name=connected,proto3" json:"connected,omitempty"`
	ControllerID  string    `protobuf:"bytes,2,opt,name=controllerID,proto3" json:"controllerID,omitempty"`
	ControlnodeID int64     `protobuf:"varint,3,opt,name=controlnodeID,proto3" json:"controlnodeID,omitempty"`
	Nodelist      *NodeList `protobuf:"bytes,4,opt,name=nodelist,proto3" json:"nodelist,omitempty"`
	MeshSSID      string    `protobuf:"bytes,5,opt,name=meshSSID,proto3" json:"meshSSID,omitempty"`
	MeshPSWD      string    `protobuf:"bytes,6,opt,name=meshPSWD,proto3" json:"meshPSWD,omitempty"`
	MeshPORT      int32     `protobuf:"varint,7,opt,name=meshPORT,proto3" json:"meshPORT,omitempty"`
}

func (x *MeshOrchStatus) Reset() {
	*x = MeshOrchStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fyrmesh_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshOrchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshOrchStatus) ProtoMessage() {}

func (x *MeshOrchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fyrmesh_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshOrchStatus.ProtoReflect.Descriptor instead.
func (*MeshOrchStatus) Descriptor() ([]byte, []int) {
	return file_proto_fyrmesh_proto_rawDescGZIP(), []int{2}
}

func (x *MeshOrchStatus) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *MeshOrchStatus) GetControllerID() string {
	if x != nil {
		return x.ControllerID
	}
	return ""
}

func (x *MeshOrchStatus) GetControlnodeID() int64 {
	if x != nil {
		return x.ControlnodeID
	}
	return 0
}

func (x *MeshOrchStatus) GetNodelist() *NodeList {
	if x != nil {
		return x.Nodelist
	}
	return nil
}

func (x *MeshOrchStatus) GetMeshSSID() string {
	if x != nil {
		return x.MeshSSID
	}
	return ""
}

func (x *MeshOrchStatus) GetMeshPSWD() string {
	if x != nil {
		return x.MeshPSWD
	}
	return ""
}

func (x *MeshOrchStatus) GetMeshPORT() int32 {
	if x != nil {
		return x.MeshPORT
	}
	return 0
}

type SimpleLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SimpleLog) Reset() {
	*x = SimpleLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fyrmesh_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleLog) ProtoMessage() {}

func (x *SimpleLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fyrmesh_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleLog.ProtoReflect.Descriptor instead.
func (*SimpleLog) Descriptor() ([]byte, []int) {
	return file_proto_fyrmesh_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleLog) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ComplexLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logsource   string            `protobuf:"bytes,1,opt,name=logsource,proto3" json:"logsource,omitempty"`
	Logtype     string            `protobuf:"bytes,2,opt,name=logtype,proto3" json:"logtype,omitempty"`
	Logtime     string            `protobuf:"bytes,3,opt,name=logtime,proto3" json:"logtime,omitempty"`
	Logmessage  string            `protobuf:"bytes,4,opt,name=logmessage,proto3" json:"logmessage,omitempty"`
	Logmetadata map[string]string `protobuf:"bytes,5,rep,name=logmetadata,proto3" json:"logmetadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComplexLog) Reset() {
	*x = ComplexLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fyrmesh_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexLog) ProtoMessage() {}

func (x *ComplexLog) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fyrmesh_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexLog.ProtoReflect.Descriptor instead.
func (*ComplexLog) Descriptor() ([]byte, []int) {
	return file_proto_fyrmesh_proto_rawDescGZIP(), []int{4}
}

func (x *ComplexLog) GetLogsource() string {
	if x != nil {
		return x.Logsource
	}
	return ""
}

func (x *ComplexLog) GetLogtype() string {
	if x != nil {
		return x.Logtype
	}
	return ""
}

func (x *ComplexLog) GetLogtime() string {
	if x != nil {
		return x.Logtime
	}
	return ""
}

func (x *ComplexLog) GetLogmessage() string {
	if x != nil {
		return x.Logmessage
	}
	return ""
}

func (x *ComplexLog) GetLogmetadata() map[string]string {
	if x != nil {
		return x.Logmetadata
	}
	return nil
}

type ControlCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command  string            `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ControlCommand) Reset() {
	*x = ControlCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fyrmesh_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCommand) ProtoMessage() {}

func (x *ControlCommand) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fyrmesh_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCommand.ProtoReflect.Descriptor instead.
func (*ControlCommand) Descriptor() ([]byte, []int) {
	return file_proto_fyrmesh_proto_rawDescGZIP(), []int{5}
}

func (x *ControlCommand) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ControlCommand) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type NodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIDs []int64 `protobuf:"varint,1,rep,packed,name=nodeIDs,proto3" json:"nodeIDs,omitempty"`
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_fyrmesh_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fyrmesh_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_proto_fyrmesh_proto_rawDescGZIP(), []int{6}
}

func (x *NodeList) GetNodeIDs() []int64 {
	if x != nil {
		return x.NodeIDs
	}
	return nil
}

var File_proto_fyrmesh_proto protoreflect.FileDescriptor

var file_proto_fyrmesh_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x79, 0x72, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x07,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x68, 0x4f, 0x72, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x68, 0x53, 0x53, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x68, 0x53, 0x53, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x50,
	0x53, 0x57, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x50,
	0x53, 0x57, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x4f, 0x52, 0x54, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x4f, 0x52, 0x54, 0x22,
	0x25, 0x0a, 0x09, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4c, 0x6f, 0x67, 0x2e, 0x4c,
	0x6f, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3e, 0x0a, 0x10,
	0x4c, 0x6f, 0x67, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x32, 0x6c, 0x0a, 0x09,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4c,
	0x6f, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22, 0x00, 0x32, 0xaf, 0x02, 0x0a, 0x0c, 0x4f,
	0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x4f, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x07, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2a, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_fyrmesh_proto_rawDescOnce sync.Once
	file_proto_fyrmesh_proto_rawDescData = file_proto_fyrmesh_proto_rawDesc
)

func file_proto_fyrmesh_proto_rawDescGZIP() []byte {
	file_proto_fyrmesh_proto_rawDescOnce.Do(func() {
		file_proto_fyrmesh_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_fyrmesh_proto_rawDescData)
	})
	return file_proto_fyrmesh_proto_rawDescData
}

var file_proto_fyrmesh_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_fyrmesh_proto_goTypes = []interface{}{
	(*Trigger)(nil),        // 0: main.Trigger
	(*Acknowledge)(nil),    // 1: main.Acknowledge
	(*MeshOrchStatus)(nil), // 2: main.MeshOrchStatus
	(*SimpleLog)(nil),      // 3: main.SimpleLog
	(*ComplexLog)(nil),     // 4: main.ComplexLog
	(*ControlCommand)(nil), // 5: main.ControlCommand
	(*NodeList)(nil),       // 6: main.NodeList
	nil,                    // 7: main.Trigger.MetadataEntry
	nil,                    // 8: main.ComplexLog.LogmetadataEntry
	nil,                    // 9: main.ControlCommand.MetadataEntry
}
var file_proto_fyrmesh_proto_depIdxs = []int32{
	7,  // 0: main.Trigger.metadata:type_name -> main.Trigger.MetadataEntry
	6,  // 1: main.MeshOrchStatus.nodelist:type_name -> main.NodeList
	8,  // 2: main.ComplexLog.logmetadata:type_name -> main.ComplexLog.LogmetadataEntry
	9,  // 3: main.ControlCommand.metadata:type_name -> main.ControlCommand.MetadataEntry
	0,  // 4: main.Interface.Read:input_type -> main.Trigger
	5,  // 5: main.Interface.Write:input_type -> main.ControlCommand
	0,  // 6: main.Orchestrator.Status:input_type -> main.Trigger
	0,  // 7: main.Orchestrator.Connection:input_type -> main.Trigger
	0,  // 8: main.Orchestrator.Observe:input_type -> main.Trigger
	0,  // 9: main.Orchestrator.Ping:input_type -> main.Trigger
	0,  // 10: main.Orchestrator.Nodelist:input_type -> main.Trigger
	5,  // 11: main.Orchestrator.Command:input_type -> main.ControlCommand
	4,  // 12: main.Interface.Read:output_type -> main.ComplexLog
	1,  // 13: main.Interface.Write:output_type -> main.Acknowledge
	2,  // 14: main.Orchestrator.Status:output_type -> main.MeshOrchStatus
	1,  // 15: main.Orchestrator.Connection:output_type -> main.Acknowledge
	3,  // 16: main.Orchestrator.Observe:output_type -> main.SimpleLog
	1,  // 17: main.Orchestrator.Ping:output_type -> main.Acknowledge
	6,  // 18: main.Orchestrator.Nodelist:output_type -> main.NodeList
	1,  // 19: main.Orchestrator.Command:output_type -> main.Acknowledge
	12, // [12:20] is the sub-list for method output_type
	4,  // [4:12] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_fyrmesh_proto_init() }
func file_proto_fyrmesh_proto_init() {
	if File_proto_fyrmesh_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_fyrmesh_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fyrmesh_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fyrmesh_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshOrchStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fyrmesh_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fyrmesh_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fyrmesh_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_fyrmesh_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_fyrmesh_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_fyrmesh_proto_goTypes,
		DependencyIndexes: file_proto_fyrmesh_proto_depIdxs,
		MessageInfos:      file_proto_fyrmesh_proto_msgTypes,
	}.Build()
	File_proto_fyrmesh_proto = out.File
	file_proto_fyrmesh_proto_rawDesc = nil
	file_proto_fyrmesh_proto_goTypes = nil
	file_proto_fyrmesh_proto_depIdxs = nil
}
